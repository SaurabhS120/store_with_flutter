// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/usecase/get_cart_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:domain/model/cart_model.dart' as _i4;
import 'package:domain/repo/cart_repo.dart' as _i2;
import 'package:domain/usecase/get_cart_usecase.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [CartRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockCartRepo extends _i1.Mock implements _i2.CartRepo {
  @override
  _i3.Future<List<_i4.CartModel>> getCart(int? userId) => (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [userId],
        ),
        returnValue: _i3.Future<List<_i4.CartModel>>.value(<_i4.CartModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.CartModel>>.value(<_i4.CartModel>[]),
      ) as _i3.Future<List<_i4.CartModel>>);
}

/// A class which mocks [GetCartUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCartUseCase extends _i1.Mock implements _i5.GetCartUseCase {
  @override
  _i3.Future<List<_i4.CartModel>> getCart(_i5.GetCartUsecaseParam? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCart,
          [params],
        ),
        returnValue: _i3.Future<List<_i4.CartModel>>.value(<_i4.CartModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.CartModel>>.value(<_i4.CartModel>[]),
      ) as _i3.Future<List<_i4.CartModel>>);
}
