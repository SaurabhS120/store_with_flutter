// Mocks generated by Mockito 5.4.4 from annotations
// in domain/test/usecase/get_products_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:domain/model/product_model.dart' as _i4;
import 'package:domain/repo/products_repo.dart' as _i2;
import 'package:domain/usecase/get_products_usecase.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeProductsRepo_0 extends _i1.SmartFake implements _i2.ProductsRepo {
  _FakeProductsRepo_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProductsRepo].
///
/// See the documentation for Mockito's code generation for more information.
class MockProductsRepo extends _i1.Mock implements _i2.ProductsRepo {
  @override
  _i3.Future<List<_i4.ProductModel>> getProducts() => (super.noSuchMethod(
        Invocation.method(
          #getProducts,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]),
      ) as _i3.Future<List<_i4.ProductModel>>);
}

/// A class which mocks [GetProductsUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProductsUsecase extends _i1.Mock
    implements _i5.GetProductsUsecase {
  @override
  _i2.ProductsRepo get productsRepository => (super.noSuchMethod(
        Invocation.getter(#productsRepository),
        returnValue: _FakeProductsRepo_0(
          this,
          Invocation.getter(#productsRepository),
        ),
        returnValueForMissingStub: _FakeProductsRepo_0(
          this,
          Invocation.getter(#productsRepository),
        ),
      ) as _i2.ProductsRepo);

  @override
  _i3.Future<List<_i4.ProductModel>> execute() => (super.noSuchMethod(
        Invocation.method(
          #execute,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i4.ProductModel>>.value(<_i4.ProductModel>[]),
      ) as _i3.Future<List<_i4.ProductModel>>);
}
